QUERIES

1) SELECT *
FROM Farms;

2)SELECT Country, A06_province, A07_district, A08_ward, A09_village
FROM Farms;

3)SELECT A*
FROM Farms;

4)Select *
From SN7577
Limit 10;


5)SELECT *
FROM Farms
LIMIT 10;

6) ESERCIZIO 1
SELECT  Id
      , B16_years_liv
	  , B17_parents_liv
	  , B18_sp_parents_liv
	  , B19_grand_liv
	  , B20_sp_grand_liv
FROM Farms
LIMIT 5;

7) WHERE

SELECT  Id, B16_years_liv
FROM Farms
WHERE B16_years_liv > 25;

8)WHERE
 SELECT  Id, B17_parents_liv
FROM Farms
WHERE B17_parents_liv = 'yes';

9) using precedence with brakets
SELECT  Id
FROM Farms
WHERE    B17_parents_liv = 'yes' 
     AND B18_sp_parents_liv = 'yes' 
	 AND B19_grand_liv = 'yes' 
	 AND B20_sp_grand_liv = 'yes';
10)using precedence with brakets
SELECT  Id
FROM Farms
WHERE (B17_parents_liv = 'yes' OR B18_sp_parents_liv = 'yes') AND B16_years_liv > 60;


11) BETWEEN
SELECT Id, B16_years_liv
FROM Farms
WHERE B16_years_liv > 50 AND B16_years_liv < 60;

12) IN
SELECT Id, B16_years_liv
FROM Farms
WHERE B16_years_liv IN (51, 52, 53, 54, 55, 56, 57, 58, 59);



13) challenge 2
SELECT Id, A09_village, A11_years_farm, B16_years_liv
FROM Farms
WHERE     A09_village IN ('God', 'Ruaca') 
      AND A11_years_farm BETWEEN 21 AND 29 
	  AND B16_years_liv > 40;


14) sorting
SELECT Id, A09_village, A11_years_farm, B16_years_liv
FROM Farms
WHERE A09_village = 'God'
ORDER BY A11_years_farm;


15) desc
SELECT Id, A09_village, A11_years_farm, B16_years_liv
FROM Farms
WHERE A09_village = 'God'
ORDER BY A11_years_farm DESC;

16) multiple
SELECT Id, A09_village, A11_years_farm, B16_years_liv
FROM Farms
WHERE A09_village = 'God'
ORDER BY A11_years_farm DESC , B16_years_liv ASC;


17) Select null
SELECT *
FROM Farms
WHERE F14_items_owned IS NULL;


18) Different types od NULL
SELECT E01_water_use, E_no_group_count, E_yes_group_count
FROM Farms;

19) Change Null values

UPDATE Farms
SET F14_items_owned = '[]'
WHERE F14_items_owned is NULL;
 

20)Exclude Null values 
SELECT * from Farms
WHERE F14_items_owned IS NOT NULL;




21) Creating column 
SELECT D02_total_plot * 2.4701
FROM Plots;



22) using Alias
SELECT D02_total_plot * 2.4701 AS D02_total_plot_converted
FROM Plots
;



23) ROUND 
SELECT ROUND(D02_total_plot * 2.4701, 2) as D02_total_plot_converted
FROM Plots;

24) Challenge
SELECT Id, plot_Id, D01_curr_plot, D02_total_plot,
       ROUND(D02_total_plot * 2.4701, 2) AS D02_total_plot_converted,
	   'acres' AS D03_unit_land_converted
FROM Plots;




25)USe Instr and substr see the three dates
SELECT A01_interview_date, A04_start, A05_end
FROM Farms; 


26) notice something odd in the order
SELECT A01_interview_date
FROM Farms
ORDER BY A01_interview_date
;



27)need to change them to date
SELECT A01_interview_date, 
       date(A01_interview_date) AS converted_A01,
	   A04_start,
	   date(A04_start) AS coverted_A04
FROM Farms
;

28) change the way A01_interview_date looks. Instead of dd/mm/yyyy we need yyyy-mm-dd
SELECT A01_interview_date,
       substr(A01_interview_date,7,4) as year,
	   substr(A01_interview_date,4,2) as month,
	   substr(A01_interview_date,1,2) as day
FROM Farms
;


29) concanetated
SELECT A01_interview_date,
       substr(A01_interview_date,7,4) || '-' ||
	   substr(A01_interview_date,4,2) || '-' ||
	   substr(A01_interview_date,1,2) as converted_date
FROM Farms
;


30) now I can transform with date
SELECT A01_interview_date,
       date(
       substr(A01_interview_date,7,4) || '-' ||
	   substr(A01_interview_date,4,2) || '-' ||
	   substr(A01_interview_date,1,2)
	   ) as converted_date
FROM Farms
ORDER BY converted_date
;


31) Challenge
SELECT A01_interview_date,
       date(
       substr(A01_interview_date,7,4) || '-' ||
	   substr(A01_interview_date,4,2) || '-' ||
	   substr(A01_interview_date,1,2)
	   ) as converted_date
FROM Farms
ORDER BY A01_interview_date
;

32) No need to keep all in one coloumn for date

SELECT A01_interview_date,
       substr(A01_interview_date,7,4) as year,
	   substr(A01_interview_date,4,2) as month,
	   substr(A01_interview_date,1,2) as day
FROM Farms
ORDER BY year DESC, month DESC, day DESC
;

33) Use SQL sintax to create new values
SELECT Id, country,
       CASE country
	       WHEN 'Moz' THEN 'Mozambique'
		   WHEN 'Taz' THEN 'Tanzania'
	   ELSE 'Unknown Country'
       END AS country_fullname
FROM Farms;



34)Binned
SELECT Id, A11_years_farm,
       CASE
	       WHEN  A11_years_farm BETWEEN 1 AND 10 THEN '1-10'
		   WHEN  A11_years_farm BETWEEN 11 AND 20 THEN '11-20'
		   WHEN  A11_years_farm BETWEEN 21 AND 30 THEN '21-30'
		   WHEN  A11_years_farm BETWEEN 31 AND 40 THEN '31-40'
		   WHEN  A11_years_farm BETWEEN 41 AND 50 THEN '41-50'
		   WHEN  A11_years_farm BETWEEN 41 AND 50 THEN '51-60'
	   ELSE '> 60'	   
	   END AS A11_years_farm_range
FROM Farms;





35) Built in stat
select 
       min(A11_years_farm),
	   max(A11_years_farm),
	   avg(A11_years_farm)
from Farms; 

36)select distinct on province
select distinct A06_province
from Farms;


37) select distinct on village
select distinct A11_village
from Farms;



38) Challenge
select distinct A06_province, A07_district, A08_ward, A09_village
from Farms
order by A06_province, A07_district, A08_ward, A09_village;


39) Group by
select A08_ward,
       count(*) as How_many
from Farms
group by A08_ward
order by How_many;


34)Challenge
select A09_village,
       min(A11_years_farm) as min,
       max(A11_years_farm) as max,
	   avg(A11_years_farm) as avg,
	   count(*) as how_many
from Farms
where A07_district = 'Nhamatanda'
group by A09_village;


35) Having
select A08_ward,
       min(A11_years_farm) as min_years,
	   max(A11_years_farm) as max_years,
	   count(*) as how_many_farms
from Farms
group by A08_ward
having how_many_farms > 2;

36)challenge
select D_curr_crop,
       count(*) as how_many
from Crops
group by D_curr_crop
having how_many > 100;

37) create table
CREATE TABLE Animal
(     Id_A Integer,
      Name Text
);

38) Create table from other tables
SELECT Id, 
       Country, 
       A06_province, 
       A07_district,
       A08_ward, 
       A09_village
FROM Farms;
FROM SN7577;

39) CREATE TABLE Farms_location AS
SELECT Id, 
       Country, 
       A06_province, 
       A07_district,
       A08_ward, 
       A09_village
FROM Farms;

40) create a table with subsample
CREATE TABLE crops_rice AS
SELECT *
FROM Crops
WHERE D_curr_crop = 'rice'
;


41)create wiew
CREATE VIEW Farms_location AS
SELECT Id, 
       Country, 
       A06_province, 
       A07_district,
       A08_ward, 
       A09_village
FROM Farms;
       




42) Inizio Joins
-- how many crops of Maize?
select * 
from Crops
where D_curr_crop = 'maize'
;

43) -- Which farms have more than 12 in the Houshold
select Id, B_no_membrs 
from Farms
where B_no_membrs > 12
;



44)Join
select a.Id, a.B_no_membrs,
       b.Id, b.D_curr_crop
from Farms as a
join Crops as b
on a.Id = b.Id and a.B_no_membrs > 12 and b.D_curr_crop = 'maize';


45)Challenge 
select a.Id as Farms_Id, a.B_no_membrs,
       b.Id as Crops_Id, b.plot_Id, b.D_curr_crop
from Farms as a
join Crops as b
on a.Id = b.Id and a.B_no_membrs > 12 and b.D_curr_crop = 'maize'
;

46) Multiple joins
select a.Id as Farms_Id, a.B_no_membrs,
       b.Id , b.plot_id as plot_id, b.D02_total_plot,
       c.Id as Crops_Id, c.plot_Id as crops_plot_id, c.D_curr_crop
from Farms as a
join Plots as b
join Crops  as c
on a.Id = b.Id and ( b.Id = c.Id and b.plot_id = c.plot_id) and a.B_no_membrs > 12 and c.D_curr_crop = 'maize';

49) CHallenge1
SELECT a.Id as Farms_Id, 
       SUM(b.D02_total_plot) AS total_planted,
       c.D_curr_crop
FROM Farms AS a
JOIN Plots AS b
JOIN Crops AS c
ON a.Id = b.Id AND ( b.Id = c.Id and b.plot_id = c.plot_id) AND a.B_no_membrs > 12 AND c.D_curr_crop = 'maize'
GROUP BY a.Id, c.D_curr_crop;
